//
//  Rem
//––––––––––––––––––––––––––––––––––––––––––––––––––
$rem-baseline: 16px !default;
$rem-fallback: false !default;
$rem-px-only: false !default;

@function rem-separator($list, $separator: false) {
    @if $separator=="comma"or $separator=="space" {
        @return append($list, null, $separator);
    }

    @if function-exists("list-separator")==true {
        @return list-separator($list);
    }

    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)
    $test-list: ();

    @each $item in $list {
        $test-list: append($test-list, $item, space);
    }

    @return if($test-list==$list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
    font-size: $zoom / 16px * $rem-baseline;
}

@function rem-convert($to, $values...) {
    $result: ();
    $separator: rem-separator($values);

    @each $value in $values {
        @if type-of($value)=="number"and unit($value)=="rem"and $to=="px" {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        }

        @else if type-of($value)=="number"and unit($value)=="px"and $to=="rem" {
            $result: append($result, $value / $rem-baseline * 1rem, $separator);
        }

        @else if type-of($value)=="list" {
            $value-separator: rem-separator($value);
            $value: rem-convert($to, $value...);
            $value: rem-separator($value, $value-separator);
            $result: append($result, $value, $separator);
        }

        @else {
            $result: append($result, $value, $separator);
        }
    }

    @return if(length($result)==1, nth($result, 1), $result);
}

@function rem($values...) {
    @if $rem-px-only {
        @return rem-convert(px, $values...);
    }

    @else {
        @return rem-convert(rem, $values...);
    }
}

@mixin rem($properties, $values...) {
    @if type-of($properties)=="map" {
        @each $property in map-keys($properties) {
            @include rem($property, map-get($properties, $property));
        }
    }

    @else {
        @each $property in $properties {
            @if $rem-fallback or $rem-px-only {
                #{$property}: rem-convert(px, $values...);
            }

            @if not $rem-px-only {
                #{$property}: rem-convert(rem, $values...);
            }
        }
    }
}

@mixin background-opacity($color, $opacity: 0.3) {
    background: $color;
    /* The Fallback */
    background: rgba($color, $opacity);
}

// Transition
@mixin transition($property: all, $duration: 0.4s, $ease: ease) {
    transition: $property $duration $ease;
    -webkit-transition: $property $duration $ease;
    -moz-transition: $property $duration $ease;
    -ms-transition: $property $duration $ease;
}



// absolute-left-top
@mixin absolute-left-top($position: absolute, $left: 0, $top: 0) {
    position: $position;
    left: $left;
    top: $top;
}

// absolute-left-bottom
@mixin absolute-left-bottom($position: absolute, $left: 0, $bottom: 0) {
    position: $position;
    left: $left;
    bottom: $bottom;
}

// absolute-right-top
@mixin absolute-right-top($position: absolute, $right: 0, $top: 0) {
    position: $position;
    right: $right;
    top: $top;
}

// absolute-right-bottom
@mixin absolute-right-bottom($position: absolute, $right: 0, $bottom: 0) {
    position: $position;
    right: $right;
    bottom: $bottom;
}

// media quaries
@mixin breakpoint($breakpoint) {

    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media #{inspect(map-get($breakpoints, $breakpoint))} {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        +"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

